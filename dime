#!/bin/bash

#script config
DIME_LOGLEVEL=2

#globals
export DIME_SCRIPTPATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly DIME_SCRIPTPATH
export DIME_CACHEPATH="${HOME}/.dime.d/cache"
readonly DIME_CACHEPATH

#script globals
DIME_PENNIES=""
DIME_FAILED=""

#constants
DIME_ERR_NONE=0
DIME_ERR_GENERIC=1
DIME_ERR_USAGE=2
DIME_ERR_NOTFOUND=4
DIME_LOG_LEVELS="
CRITICAL 5
ERROR 4
WARNING 3
INFO 2
DEBUG 1
NONE 0"

function log_format {
    set +x
    # params:
    #  <stdin>  log message
    #  context  ":" seperated context for the message
    # convention:
    #  return stdout

    local context=${@}

    local line
    local timestamp
    while read line ; do
        timestamp=$(date +%s)
        echo ${timestamp}:${context}:${line}
    done
    set -x
}

function log {
    # params:
    #  loglevel_in  case insensitive level name or value
    #  msg          log message (<stdin> if "-")
    # convention:
    #  print stdout as stderr
    #  return error code

    local loglevel_in=${1}
    shift
    local msg=${@}

    local loglevel_search=$(echo "${DIME_LOG_LEVELS}" | grep -i -e "^${loglevel_in} " -e " ${loglevel_in}$")

    local loglevel=${loglevel_search//* }
    local loglevel_name=${loglevel_search// *}

    local func=${FUNCNAME[1]}

    local context="${loglevel_name}:${func}"

    # print out if we found a valid log level
    if [[ -n ${loglevel} && -n ${loglevel_name} && ${loglevel} -ge ${DIME_LOGLEVEL} ]] ; then
        # read from stdin or msg
        if [[ ${msg} == "-" ]] ; then
            log_format ${context} 1>&2
        else
            echo ${msg} | log_format ${context} 1>&2
        fi
    elif [[ -n ${loglevel} && -n ${loglevel_name} ]] ; then
        : # do nothing
    else
        # TODO: add protection against infinite recursion
        log error "log level \"${loglevel_in}\" not found"
        return ${DIME_ERR_NOTFOUND}
    fi
}

function penny_script {
    # params:
    #  penny - name of penny to source
    # convention:
    #  return stdout as penny script name
    #  return error code

    local penny=${1}

    if [[ -e "${DIME_SCRIPTPATH}/pennies/${penny}/${penny}" ]] ; then
        echo "${DIME_SCRIPTPATH}/pennies/${penny}/${penny}"
    else
        # bail if we couldn't find a script
        log error "penny \"${penny}\" not found"
        return ${DIME_ERR_NOTFOUND}
    fi
}

function require {
    # params:
    #  penny - name of penny to source
    # convention:
    #  ignore stdout
    #  return error code

    local r=${DIME_ERR_NONE}

    local penny=${1}

    log debug "requiring penny \"${penny}\""

    # check if already loaded
    if echo "${DIME_PENNIES}" | grep "^${penny}$" &> /dev/null ; then
        log debug "not loading \"${penny}\""
        return
    fi
    log debug "loading \"${penny}\""

    script=$(penny_script ${penny}) ; r=$?
    if [[ ${r} -ne 0 ]] ; then
        return ${r}
    fi
    log info "source ${script}"
    source ${script}

    DIME_PENNIES=$(echo -e "${DIME_PENNIES}\n${penny}")
}

function run_penny {
    # params:
    #  penny - name of penny to run
    # convention:
    #  print stdout
    #  return error code

    local r=${DIME_ERR_NONE}
    local penny_r

    local penny=${1}
    shift
    local args=${@}

    log info "${penny} ${@}"
    echo "${penny} ${@}"

    require ${penny} ; r=${?}
    if [[ ${r} -ne 0 ]] ; then
        # add require failures
        log error "${penny} ${@} failed to install"
        echo " FAIL"
        DIME_FAILED=$(echo -e "${DIME_FAILED}\n${penny} ${args}" | sort | uniq | grep -v "^$")
        return ${r}
    fi

    if _${penny}_verify ${@} 1>&2 ; then
        log info "${penny} ${@} already installed"
    else
        pushd . &> /dev/null

        # only install if we have to
        # TODO: better method of logging results
        if [[ ${DIME_LOGLEVEL} -le 2 && ! ${penny} == "wallet" ]] ; then
            set -x
        fi
        if [[ ! ${penny} == "wallet" ]] ; then
            _${penny} ${@} 1>&2
            penny_r=${?}
        else
            _${penny} ${@}
            penny_r=${?}
        fi
        # TODO: better method of logging results 2
        if [[ ${DIME_LOGLEVEL} -le 2 && ! ${penny} == "wallet" ]] ; then
            set +x
        fi

        popd &> /dev/null

        # if penny failed, then record it
        if [[ ${penny_r} -ne 0 ]] ; then
            log error "${penny} ${@} failed to install"
            echo " FAIL"
            DIME_FAILED=$(echo -e "${DIME_FAILED}\n${penny} ${args}" | sort | uniq | grep -v "^$")
            return ${penny_r}
        fi
    fi
}

function usage {
    # convetion:
    #  print stdout
    echo "dime <cmd> [params]

install:
 <penny> [arg] [arg]   install a penny
 wallet <file> [file]  install wallets full of pennies
"
    exit ${DIME_ERR_USAGE}
}

case ${1} in
    install)
        shift
        run_penny ${@}
        ;;
    *)
        usage
        ;;
esac

# display any failures to stdout
if [[ -n "${DIME_FAILED}" ]] ; then
    echo ""
    echo "FAILED"
    echo "${DIME_FAILED}"
fi
