#!/bin/bash

#dotfiles git://github.com/kbatten/scripts/dotfiles ${HOME}/

function dotfiles_verify {
    local source=${1%/}

    if [[ -z "${source}" ]] ; then return 1 ; fi

    run_penny package_install git

    git_source_sub=${source##*.git}
    git_source=${source%$git_source_sub}
    git_source_dir=${git_source_sub##*/} ; [[ ${#git_source_dir} -eq 0 ]] && git_source_dir="."

    cd "${DIME_CACHEPATH}/dotfiles" || return 1
    git status || return 1
    git fetch origin || return 1

    # look for diffs in the specific files against git
    if [[ $(git diff --name-status origin/master "${git_source_dir}" | wc -l) -gt 0 ]] ; then
        return 1
    fi

    # TODO: look for diffs vs destination

    return 0
}

function dotfiles {
    local source=${1%/}
    local dest=${HOME}

    if [[ -z "${source}" ]] ; then return 1 ; fi

    # fetch files with git
    run_penny package_install git
    # TODO: see what happens when we aren't checking out a subdirectory
    git_source_sub=${source##*.git}
    git_source=${source%$git_source_sub}
    git_source_dir=${git_source_sub##*/} ; [[ ${#git_source_dir} -eq 0 ]] && git_source_dir="."

    mkdir -p "${DIME_CACHEPATH}/dotfiles"
    cd "${DIME_CACHEPATH}/dotfiles"

    # if not a git repo, init it
    git status || {
        git init
        git remote add -f origin ${git_source}
        git config core.sparsecheckout true
        echo ${git_source_sub} > .git/info/sparse-checkout
        git pull origin master
        }

    # if cache existed, see if source has been modified
    git fetch origin
    # look for diffs in the specific files
    if [[ $(git diff --name-status origin/master "${git_source_dir}" | wc -l) -gt 0 ]] ; then
        git pull origin master
    fi

    pushd ${git_source_dir} && \cp -r . "${dest}"
    popd

    return 0
}
